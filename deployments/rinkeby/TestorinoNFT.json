{
  "address": "0xc37e69cFdbA579338C6a1c621ce6C01AFAeAB997",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revealUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "NewAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "SetCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "setBatchURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_revealUntil",
          "type": "uint256"
        }
      ],
      "name": "setRevealUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc14f6a15f079870d81a6c285ccb49de9ccc6e6b49a440b003c39af5d44c7a394",
  "receipt": {
    "to": null,
    "from": "0x169a482B131550c912797228702c0d8E31531Cd6",
    "contractAddress": "0xc37e69cFdbA579338C6a1c621ce6C01AFAeAB997",
    "transactionIndex": 9,
    "gasUsed": "1982556",
    "logsBloom": "0x
    "blockHash": "0x81a6fca04a22e519adcc1fceb1b729a56eeb4dcbf33854b1b73b823c54f92a79",
    "transactionHash": "0xc14f6a15f079870d81a6c285ccb49de9ccc6e6b49a440b003c39af5d44c7a394",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 11254464,
        "transactionHash": "0xc14f6a15f079870d81a6c285ccb49de9ccc6e6b49a440b003c39af5d44c7a394",
        "address": "0xc37e69cFdbA579338C6a1c621ce6C01AFAeAB997",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000169a482b131550c912797228702c0d8e31531cd6"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x81a6fca04a22e519adcc1fceb1b729a56eeb4dcbf33854b1b73b823c54f92a79"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 11254464,
        "transactionHash": "0xc14f6a15f079870d81a6c285ccb49de9ccc6e6b49a440b003c39af5d44c7a394",
        "address": "0xc37e69cFdbA579338C6a1c621ce6C01AFAeAB997",
        "topics": [
          "0xa2b5745d4007496d5396c17a02bd22268aec80e4ed7c296025fedfdb2bdefd89"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 79,
        "blockHash": "0x81a6fca04a22e519adcc1fceb1b729a56eeb4dcbf33854b1b73b823c54f92a79"
      }
    ],
    "blockNumber": 11254464,
    "cumulativeGasUsed": "4025098",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmNgUcJxb1onwt7jg3xXRBU6F4gDSPsDCeUrxgQ3podYFJ/",
    10,
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "2d48b330d0272fde365811dbd17b92fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revealUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"NewAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"SetCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"setBatchURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_revealUntil\",\"type\":\"uint256\"}],\"name\":\"setRevealUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_cap\":\"- Maximum number of NFTs\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isAdmin(address)\":{\"params\":{\"admin\":\"- Address of Admin\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,string)\":{\"details\":\"- Only admins can mint new tokens\",\"params\":{\"URI\":\"- uri of the NFT\",\"recipient\":\"- Mint to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAdmin(address,bool)\":{\"params\":{\"admin\":\"- Address of Admin\",\"enabled\":\"- Enable/Disable Admin Access\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"baseURI_\":\"- New base uri\"}},\"setBatchURI(uint256[],string[])\":{\"params\":{\"_tokenIds\":\"- Token Ids of NFT\",\"tokenURIs\":\"- URIs to set\"}},\"setCap(uint256)\":{\"params\":{\"_cap\":\"- Maximum number of NFTs\"}},\"setRevealUntil(uint256)\":{\"params\":{\"_revealUntil\":\"- new tokenId to reveal untill\"}},\"setURI(uint256,string)\":{\"params\":{\"_tokenURI\":\"- uri to set\",\"tokenId\":\"- Token Id of NFT\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"- token ID of the NFT\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseURI()\":{\"notice\":\"- Returns the base uri for NFTs\"},\"isAdmin(address)\":{\"notice\":\"- Check Admin Access\"},\"mint(address,string)\":{\"notice\":\"- Mints NFT\"},\"setAdmin(address,bool)\":{\"notice\":\"- Set Admin Access\"},\"setBaseURI(string)\":{\"notice\":\"- Sets the base uri for NFTs\"},\"setBatchURI(uint256[],string[])\":{\"notice\":\"- Set URI for token batch\"},\"setCap(uint256)\":{\"notice\":\"- Sets cap for NFTs\"},\"setRevealUntil(uint256)\":{\"notice\":\"- Sets the reveal untill\"},\"setURI(uint256,string)\":{\"notice\":\"- Set URI for token\"},\"tokenURI(uint256)\":{\"notice\":\"- Returns metadata for token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/nft/TestorinoNFT.sol\":\"TestorinoNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/nft/TestorinoNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '../utils/AccessProtected.sol';\\n\\ncontract TestorinoNFT is \\n    ERC721('TestorinoNFT', 'TNFT'),\\n    AccessProtected\\n{\\n    // -----------------------------------VARIABLES-----------------------------------\\n    using Counters for Counters.Counter;\\n    using Strings for uint256;\\n\\n    Counters.Counter private tokenIds;\\n\\n    string private __baseURI;\\n    uint256 private __revealUntil;\\n\\n    uint256 public cap;\\n\\n    mapping(uint256 => string) private _tokenURIs;\\n    \\n\\n    // ------------------------------------EVENTS-------------------------------------\\n    event SetCap(uint256 _cap);\\n\\n    // -----------------------------------FUNCTIONS-----------------------------------\\n    /// @param _cap - Maximum number of NFTs\\n    constructor(string memory baseURI_, uint256 _cap, uint256 _revealUntil) {\\n        setCap(_cap);\\n        setRevealUntil(_revealUntil);\\n        setBaseURI(baseURI_);\\n    }\\n\\n    /// @notice - Sets cap for NFTs\\n    /// @param _cap - Maximum number of NFTs\\n    function setCap(uint256 _cap)\\n        public\\n        onlyOwner\\n    {\\n        cap = _cap;\\n        emit SetCap(_cap);\\n    }\\n\\n    /// @notice - Mints NFT\\n    /// @param recipient - Mint to\\n    /// @param URI - uri of the NFT\\n    /// @dev - Only admins can mint new tokens\\n    function mint(\\n        address recipient,\\n        string memory URI\\n    )\\n        external\\n        onlyAdmin\\n        returns (uint256)\\n    {\\n        tokenIds.increment();\\n        uint256 newTokenId = tokenIds.current();\\n        require(newTokenId <= cap, 'NFT cap exceeded');\\n\\n        _mint(recipient, newTokenId);\\n        _setTokenURI(newTokenId, URI);\\n        return newTokenId;\\n    }\\n\\n    /// @notice - Sets token URI\\n    /// @param tokenId - Token Id of NFT\\n    /// @param _tokenURI - uri to set\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /// @notice - returns base URI for NFT\\n    function _baseURI()\\n        internal\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return __baseURI;\\n    }\\n\\n    /// @notice - Set URI for token\\n    /// @param tokenId - Token Id of NFT\\n    /// @param _tokenURI - uri to set\\n    function setURI(\\n        uint256 tokenId,\\n        string memory _tokenURI\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n    /// @notice - Set URI for token batch\\n    /// @param _tokenIds - Token Ids of NFT\\n    /// @param tokenURIs - URIs to set\\n    function setBatchURI(\\n        uint256[] memory _tokenIds,\\n        string[] memory tokenURIs\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require(_tokenIds.length == tokenURIs.length, 'Length mismatch');\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            _setTokenURI(_tokenIds[i], tokenURIs[i]);\\n        }\\n    }\\n\\n    /// @notice - Returns the base uri for NFTs\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /// @notice - Sets the base uri for NFTs\\n    /// @param baseURI_ - New base uri\\n    function setBaseURI(string memory baseURI_)\\n        public\\n        onlyAdmin\\n    {\\n        __baseURI = baseURI_;\\n    }\\n\\n    /// @notice - Sets the reveal untill\\n    /// @param _revealUntil - new tokenId to reveal untill\\n    function setRevealUntil(uint256 _revealUntil)\\n        public\\n        onlyAdmin\\n    {\\n        __revealUntil = _revealUntil;\\n    }\\n\\n    /// @notice - Returns metadata for token id\\n    /// @param tokenId - token ID of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n        if(tokenId > __revealUntil || bytes(__baseURI).length == 0) {\\n            return super.tokenURI(tokenId);\\n        } \\n        \\n        return string(abi.encodePacked(__baseURI, tokenId.toString()));\\n    }\\n}\",\"keccak256\":\"0x71c820265036205b34519c7b3a1d9bc7bf26007069d6ffa8209c65d5190ed7c8\",\"license\":\"MIT\"},\"src/utils/AccessProtected.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nabstract contract AccessProtected is\\n    Context,\\n    Ownable\\n{\\n    // -----------------------------------VARIABLES-----------------------------------\\n    mapping(address => bool) internal _admins;\\n\\n    // ------------------------------------EVENTS-------------------------------------\\n    event NewAdminSet(address _admin, bool _enabled);\\n\\n    // -----------------------------------MODIFIERS-----------------------------------\\n    modifier onlyAdmin() {\\n        require(\\n            _admins[_msgSender()] || _msgSender() == owner(),\\n            \\\"Caller does not have Admin Access\\\"\\n        );\\n        _;\\n    }\\n\\n    // -----------------------------------FUNCTIONS-----------------------------------\\n    /// @notice - Set Admin Access\\n    /// @param admin - Address of Admin\\n    /// @param enabled - Enable/Disable Admin Access\\n    function setAdmin(address admin, bool enabled) external onlyOwner {\\n        _admins[admin] = enabled;\\n        emit NewAdminSet(admin, enabled);\\n    }\\n\\n    /// @notice - Check Admin Access\\n    /// @param admin - Address of Admin\\n    function isAdmin(address admin) public view returns (bool) {\\n        return _admins[admin];\\n    }\\n}\",\"keccak256\":\"0xe7413734a142695575b36fb7be1e028f468191c0328777bd3574cdf42241b0df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200241a3803806200241a833981016040819052620000349162000376565b604080518082018252600c81526b15195cdd1bdc9a5b9bd3919560a21b6020808301918252835180850190945260048452631513919560e21b9084015281519192916200008491600091620002d0565b5080516200009a906001906020840190620002d0565b505050620000b7620000b1620000e160201b60201c565b620000e5565b620000c28262000137565b620000cd81620001d2565b620000d88362000247565b505050620004b9565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6006546001600160a01b03163314620001975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600b8190556040518181527fa2b5745d4007496d5396c17a02bd22268aec80e4ed7c296025fedfdb2bdefd899060200160405180910390a150565b3360009081526007602052604090205460ff1680620001fb57506006546001600160a01b031633145b620002425760405162461bcd60e51b81526020600482015260216024820152600080516020620023fa8339815191526044820152607360f81b60648201526084016200018e565b600a55565b3360009081526007602052604090205460ff16806200027057506006546001600160a01b031633145b620002b75760405162461bcd60e51b81526020600482015260216024820152600080516020620023fa8339815191526044820152607360f81b60648201526084016200018e565b8051620002cc906009906020840190620002d0565b5050565b828054620002de9062000466565b90600052602060002090601f0160209004810192826200030257600085556200034d565b82601f106200031d57805160ff19168380011785556200034d565b828001600101855582156200034d579182015b828111156200034d57825182559160200191906001019062000330565b506200035b9291506200035f565b5090565b5b808211156200035b576000815560010162000360565b6000806000606084860312156200038c57600080fd5b83516001600160401b0380821115620003a457600080fd5b818601915086601f830112620003b957600080fd5b815181811115620003ce57620003ce620004a3565b604051601f8201601f19908116603f01168101908382118183101715620003f957620003f9620004a3565b816040528281526020935089848487010111156200041657600080fd5b600091505b828210156200043a57848201840151818301850152908301906200041b565b828211156200044c5760008484830101525b928801516040909801519299979850919695505050505050565b600181811c908216806200047b57607f821691505b602082108114156200049d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611f3180620004c96000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80636352211e116100de57806395d89b4111610097578063c87b56dd11610071578063c87b56dd14610360578063d0def52114610373578063e985e9c514610386578063f2fde38b146103c257600080fd5b806395d89b4114610332578063a22cb4651461033a578063b88d4fde1461034d57600080fd5b80636352211e146102d85780636c0360eb146102eb57806370a08231146102f3578063715018a614610306578063862440e21461030e5780638da5cb5b1461032157600080fd5b806324d7806c1161014b57806347786d371161012557806347786d371461028c5780634b0bddd21461029f57806355f804b3146102b257806356d52f6f146102c557600080fd5b806324d7806c14610236578063355274ea1461026257806342842e0e1461027957600080fd5b806301ffc9a71461019357806306fdde03146101bb578063081812fc146101d0578063095ea7b3146101fb5780631bf66f371461021057806323b872dd14610223575b600080fd5b6101a66101a13660046119d0565b6103d5565b60405190151581526020015b60405180910390f35b6101c3610427565b6040516101b29190611be4565b6101e36101de366004611a3f565b6104b9565b6040516001600160a01b0390911681526020016101b2565b61020e6102093660046118f0565b610546565b005b61020e61021e36600461191a565b61065c565b61020e6102313660046117ae565b61073d565b6101a6610244366004611760565b6001600160a01b031660009081526007602052604090205460ff1690565b61026b600b5481565b6040519081526020016101b2565b61020e6102873660046117ae565b61076e565b61020e61029a366004611a3f565b610789565b61020e6102ad366004611866565b6107ee565b61020e6102c0366004611a0a565b61087b565b61020e6102d3366004611a3f565b6108d6565b6101e36102e6366004611a3f565b61091f565b6101c3610996565b61026b610301366004611760565b6109a5565b61020e610a2c565b61020e61031c366004611a58565b610a62565b6006546001600160a01b03166101e3565b6101c3610ab0565b61020e610348366004611866565b610abf565b61020e61035b3660046117ea565b610aca565b6101c361036e366004611a3f565b610b02565b61026b6103813660046118a2565b610b85565b6101a661039436600461177b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61020e6103d0366004611760565b610c44565b60006001600160e01b031982166380ac58cd60e01b148061040657506001600160e01b03198216635b5e139f60e01b145b8061042157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461043690611e23565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611e23565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610cdf565b61052a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105518261091f565b9050806001600160a01b0316836001600160a01b031614156105bf5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610521565b336001600160a01b03821614806105db57506105db8133610394565b61064d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610521565b6106578383610cfc565b505050565b3360009081526007602052604090205460ff168061068457506006546001600160a01b031633145b6106a05760405162461bcd60e51b815260040161052190611c7e565b80518251146106e35760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610521565b60005b82518110156106575761072b83828151811061070457610704611eb9565b602002602001015183838151811061071e5761071e611eb9565b6020026020010151610d6a565b8061073581611e5e565b9150506106e6565b6107473382610df3565b6107635760405162461bcd60e51b815260040161052190611d0e565b610657838383610edd565b61065783838360405180602001604052806000815250610aca565b6006546001600160a01b031633146107b35760405162461bcd60e51b815260040161052190611c49565b600b8190556040518181527fa2b5745d4007496d5396c17a02bd22268aec80e4ed7c296025fedfdb2bdefd899060200160405180910390a150565b6006546001600160a01b031633146108185760405162461bcd60e51b815260040161052190611c49565b6001600160a01b038216600081815260076020908152604091829020805460ff19168515159081179091558251938452908301527f0f1e65ade59c7481302349ccf309e2c26655f60ced75e513269e2e1a6ce9293b910160405180910390a15050565b3360009081526007602052604090205460ff16806108a357506006546001600160a01b031633145b6108bf5760405162461bcd60e51b815260040161052190611c7e565b80516108d290600990602084019061159c565b5050565b3360009081526007602052604090205460ff16806108fe57506006546001600160a01b031633145b61091a5760405162461bcd60e51b815260040161052190611c7e565b600a55565b6000818152600260205260408120546001600160a01b0316806104215760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610521565b60606109a0611079565b905090565b60006001600160a01b038216610a105760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610521565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610a565760405162461bcd60e51b815260040161052190611c49565b610a606000611088565b565b3360009081526007602052604090205460ff1680610a8a57506006546001600160a01b031633145b610aa65760405162461bcd60e51b815260040161052190611c7e565b6108d28282610d6a565b60606001805461043690611e23565b6108d23383836110da565b610ad43383610df3565b610af05760405162461bcd60e51b815260040161052190611d0e565b610afc848484846111a9565b50505050565b6060610b0d82610cdf565b610b295760405162461bcd60e51b815260040161052190611cbf565b600a54821180610b45575060098054610b4190611e23565b1590505b15610b5357610421826111dc565b6009610b5e8361125e565b604051602001610b6f929190611b00565b6040516020818303038152906040529050919050565b3360009081526007602052604081205460ff1680610bad57506006546001600160a01b031633145b610bc95760405162461bcd60e51b815260040161052190611c7e565b610bd7600880546001019055565b6000610be260085490565b9050600b54811115610c295760405162461bcd60e51b815260206004820152601060248201526f1391950818d85c08195e18d95959195960821b6044820152606401610521565b610c33848261135c565b610c3d8184610d6a565b9392505050565b6006546001600160a01b03163314610c6e5760405162461bcd60e51b815260040161052190611c49565b6001600160a01b038116610cd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610521565b610cdc81611088565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d318261091f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d7382610cdf565b610dd45760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610521565b6000828152600c6020908152604090912082516106579284019061159c565b6000610dfe82610cdf565b610e5f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610521565b6000610e6a8361091f565b9050806001600160a01b0316846001600160a01b03161480610ea55750836001600160a01b0316610e9a846104b9565b6001600160a01b0316145b80610ed557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610ef08261091f565b6001600160a01b031614610f545760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610521565b6001600160a01b038216610fb65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610521565b610fc1600082610cfc565b6001600160a01b0383166000908152600360205260408120805460019290610fea908490611de0565b90915550506001600160a01b0382166000908152600360205260408120805460019290611018908490611db4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606009805461043690611e23565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561113c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610521565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6111b4848484610edd565b6111c08484848461148f565b610afc5760405162461bcd60e51b815260040161052190611bf7565b60606111e782610cdf565b6112035760405162461bcd60e51b815260040161052190611cbf565b600061120d611079565b9050600081511161122d5760405180602001604052806000815250610c3d565b806112378461125e565b604051602001611248929190611ad1565b6040516020818303038152906040529392505050565b6060816112825750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112ac578061129681611e5e565b91506112a59050600a83611dcc565b9150611286565b60008167ffffffffffffffff8111156112c7576112c7611ecf565b6040519080825280601f01601f1916602001820160405280156112f1576020820181803683370190505b5090505b8415610ed557611306600183611de0565b9150611313600a86611e79565b61131e906030611db4565b60f81b81838151811061133357611333611eb9565b60200101906001600160f81b031916908160001a905350611355600a86611dcc565b94506112f5565b6001600160a01b0382166113b25760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610521565b6113bb81610cdf565b156114085760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610521565b6001600160a01b0382166000908152600360205260408120805460019290611431908490611db4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561159157604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906114d3903390899088908890600401611ba7565b602060405180830381600087803b1580156114ed57600080fd5b505af192505050801561151d575060408051601f3d908101601f1916820190925261151a918101906119ed565b60015b611577573d80801561154b576040519150601f19603f3d011682016040523d82523d6000602084013e611550565b606091505b50805161156f5760405162461bcd60e51b815260040161052190611bf7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ed5565b506001949350505050565b8280546115a890611e23565b90600052602060002090601f0160209004810192826115ca5760008555611610565b82601f106115e357805160ff1916838001178555611610565b82800160010185558215611610579182015b828111156116105782518255916020019190600101906115f5565b5061161c929150611620565b5090565b5b8082111561161c5760008155600101611621565b600067ffffffffffffffff83111561164f5761164f611ecf565b611662601f8401601f1916602001611d5f565b905082815283838301111561167657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146116a457600080fd5b919050565b600082601f8301126116ba57600080fd5b813560206116cf6116ca83611d90565b611d5f565b80838252828201915082860187848660051b89010111156116ef57600080fd5b6000805b8681101561173257823567ffffffffffffffff811115611711578283fd5b61171f8b88838d0101611740565b86525093850193918501916001016116f3565b509198975050505050505050565b600082601f83011261175157600080fd5b610c3d83833560208501611635565b60006020828403121561177257600080fd5b610c3d8261168d565b6000806040838503121561178e57600080fd5b6117978361168d565b91506117a56020840161168d565b90509250929050565b6000806000606084860312156117c357600080fd5b6117cc8461168d565b92506117da6020850161168d565b9150604084013590509250925092565b6000806000806080858703121561180057600080fd5b6118098561168d565b93506118176020860161168d565b925060408501359150606085013567ffffffffffffffff81111561183a57600080fd5b8501601f8101871361184b57600080fd5b61185a87823560208401611635565b91505092959194509250565b6000806040838503121561187957600080fd5b6118828361168d565b91506020830135801515811461189757600080fd5b809150509250929050565b600080604083850312156118b557600080fd5b6118be8361168d565b9150602083013567ffffffffffffffff8111156118da57600080fd5b6118e685828601611740565b9150509250929050565b6000806040838503121561190357600080fd5b61190c8361168d565b946020939093013593505050565b6000806040838503121561192d57600080fd5b823567ffffffffffffffff8082111561194557600080fd5b818501915085601f83011261195957600080fd5b813560206119696116ca83611d90565b8083825282820191508286018a848660051b890101111561198957600080fd5b600096505b848710156119ac57803583526001969096019591830191830161198e565b50965050860135925050808211156119c357600080fd5b506118e6858286016116a9565b6000602082840312156119e257600080fd5b8135610c3d81611ee5565b6000602082840312156119ff57600080fd5b8151610c3d81611ee5565b600060208284031215611a1c57600080fd5b813567ffffffffffffffff811115611a3357600080fd5b610ed584828501611740565b600060208284031215611a5157600080fd5b5035919050565b60008060408385031215611a6b57600080fd5b82359150602083013567ffffffffffffffff8111156118da57600080fd5b60008151808452611aa1816020860160208601611df7565b601f01601f19169290920160200192915050565b60008151611ac7818560208601611df7565b9290920192915050565b60008351611ae3818460208801611df7565b835190830190611af7818360208801611df7565b01949350505050565b600080845481600182811c915080831680611b1c57607f831692505b6020808410821415611b3c57634e487b7160e01b86526022600452602486fd5b818015611b505760018114611b6157611b8e565b60ff19861689528489019650611b8e565b60008b81526020902060005b86811015611b865781548b820152908501908301611b6d565b505084890196505b505050505050611b9e8185611ab5565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bda90830184611a89565b9695505050505050565b602081526000610c3d6020830184611a89565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f43616c6c657220646f6573206e6f7420686176652041646d696e2041636365736040820152607360f81b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8857611d88611ecf565b604052919050565b600067ffffffffffffffff821115611daa57611daa611ecf565b5060051b60200190565b60008219821115611dc757611dc7611e8d565b500190565b600082611ddb57611ddb611ea3565b500490565b600082821015611df257611df2611e8d565b500390565b60005b83811015611e12578181015183820152602001611dfa565b83811115610afc5750506000910152565b600181811c90821680611e3757607f821691505b60208210811415611e5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611e7257611e72611e8d565b5060010190565b600082611e8857611e88611ea3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610cdc57600080fdfea26469706673582212205b03f66ad5c2002a11a41987772c81de259416b313590691880def847572f1de64736f6c6343000807003343616c6c657220646f6573206e6f7420686176652041646d696e204163636573",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80636352211e116100de57806395d89b4111610097578063c87b56dd11610071578063c87b56dd14610360578063d0def52114610373578063e985e9c514610386578063f2fde38b146103c257600080fd5b806395d89b4114610332578063a22cb4651461033a578063b88d4fde1461034d57600080fd5b80636352211e146102d85780636c0360eb146102eb57806370a08231146102f3578063715018a614610306578063862440e21461030e5780638da5cb5b1461032157600080fd5b806324d7806c1161014b57806347786d371161012557806347786d371461028c5780634b0bddd21461029f57806355f804b3146102b257806356d52f6f146102c557600080fd5b806324d7806c14610236578063355274ea1461026257806342842e0e1461027957600080fd5b806301ffc9a71461019357806306fdde03146101bb578063081812fc146101d0578063095ea7b3146101fb5780631bf66f371461021057806323b872dd14610223575b600080fd5b6101a66101a13660046119d0565b6103d5565b60405190151581526020015b60405180910390f35b6101c3610427565b6040516101b29190611be4565b6101e36101de366004611a3f565b6104b9565b6040516001600160a01b0390911681526020016101b2565b61020e6102093660046118f0565b610546565b005b61020e61021e36600461191a565b61065c565b61020e6102313660046117ae565b61073d565b6101a6610244366004611760565b6001600160a01b031660009081526007602052604090205460ff1690565b61026b600b5481565b6040519081526020016101b2565b61020e6102873660046117ae565b61076e565b61020e61029a366004611a3f565b610789565b61020e6102ad366004611866565b6107ee565b61020e6102c0366004611a0a565b61087b565b61020e6102d3366004611a3f565b6108d6565b6101e36102e6366004611a3f565b61091f565b6101c3610996565b61026b610301366004611760565b6109a5565b61020e610a2c565b61020e61031c366004611a58565b610a62565b6006546001600160a01b03166101e3565b6101c3610ab0565b61020e610348366004611866565b610abf565b61020e61035b3660046117ea565b610aca565b6101c361036e366004611a3f565b610b02565b61026b6103813660046118a2565b610b85565b6101a661039436600461177b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61020e6103d0366004611760565b610c44565b60006001600160e01b031982166380ac58cd60e01b148061040657506001600160e01b03198216635b5e139f60e01b145b8061042157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461043690611e23565b80601f016020809104026020016040519081016040528092919081815260200182805461046290611e23565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b5050505050905090565b60006104c482610cdf565b61052a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105518261091f565b9050806001600160a01b0316836001600160a01b031614156105bf5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610521565b336001600160a01b03821614806105db57506105db8133610394565b61064d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610521565b6106578383610cfc565b505050565b3360009081526007602052604090205460ff168061068457506006546001600160a01b031633145b6106a05760405162461bcd60e51b815260040161052190611c7e565b80518251146106e35760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610521565b60005b82518110156106575761072b83828151811061070457610704611eb9565b602002602001015183838151811061071e5761071e611eb9565b6020026020010151610d6a565b8061073581611e5e565b9150506106e6565b6107473382610df3565b6107635760405162461bcd60e51b815260040161052190611d0e565b610657838383610edd565b61065783838360405180602001604052806000815250610aca565b6006546001600160a01b031633146107b35760405162461bcd60e51b815260040161052190611c49565b600b8190556040518181527fa2b5745d4007496d5396c17a02bd22268aec80e4ed7c296025fedfdb2bdefd899060200160405180910390a150565b6006546001600160a01b031633146108185760405162461bcd60e51b815260040161052190611c49565b6001600160a01b038216600081815260076020908152604091829020805460ff19168515159081179091558251938452908301527f0f1e65ade59c7481302349ccf309e2c26655f60ced75e513269e2e1a6ce9293b910160405180910390a15050565b3360009081526007602052604090205460ff16806108a357506006546001600160a01b031633145b6108bf5760405162461bcd60e51b815260040161052190611c7e565b80516108d290600990602084019061159c565b5050565b3360009081526007602052604090205460ff16806108fe57506006546001600160a01b031633145b61091a5760405162461bcd60e51b815260040161052190611c7e565b600a55565b6000818152600260205260408120546001600160a01b0316806104215760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610521565b60606109a0611079565b905090565b60006001600160a01b038216610a105760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610521565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b03163314610a565760405162461bcd60e51b815260040161052190611c49565b610a606000611088565b565b3360009081526007602052604090205460ff1680610a8a57506006546001600160a01b031633145b610aa65760405162461bcd60e51b815260040161052190611c7e565b6108d28282610d6a565b60606001805461043690611e23565b6108d23383836110da565b610ad43383610df3565b610af05760405162461bcd60e51b815260040161052190611d0e565b610afc848484846111a9565b50505050565b6060610b0d82610cdf565b610b295760405162461bcd60e51b815260040161052190611cbf565b600a54821180610b45575060098054610b4190611e23565b1590505b15610b5357610421826111dc565b6009610b5e8361125e565b604051602001610b6f929190611b00565b6040516020818303038152906040529050919050565b3360009081526007602052604081205460ff1680610bad57506006546001600160a01b031633145b610bc95760405162461bcd60e51b815260040161052190611c7e565b610bd7600880546001019055565b6000610be260085490565b9050600b54811115610c295760405162461bcd60e51b815260206004820152601060248201526f1391950818d85c08195e18d95959195960821b6044820152606401610521565b610c33848261135c565b610c3d8184610d6a565b9392505050565b6006546001600160a01b03163314610c6e5760405162461bcd60e51b815260040161052190611c49565b6001600160a01b038116610cd35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610521565b610cdc81611088565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d318261091f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d7382610cdf565b610dd45760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610521565b6000828152600c6020908152604090912082516106579284019061159c565b6000610dfe82610cdf565b610e5f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610521565b6000610e6a8361091f565b9050806001600160a01b0316846001600160a01b03161480610ea55750836001600160a01b0316610e9a846104b9565b6001600160a01b0316145b80610ed557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610ef08261091f565b6001600160a01b031614610f545760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610521565b6001600160a01b038216610fb65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610521565b610fc1600082610cfc565b6001600160a01b0383166000908152600360205260408120805460019290610fea908490611de0565b90915550506001600160a01b0382166000908152600360205260408120805460019290611018908490611db4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606009805461043690611e23565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561113c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610521565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6111b4848484610edd565b6111c08484848461148f565b610afc5760405162461bcd60e51b815260040161052190611bf7565b60606111e782610cdf565b6112035760405162461bcd60e51b815260040161052190611cbf565b600061120d611079565b9050600081511161122d5760405180602001604052806000815250610c3d565b806112378461125e565b604051602001611248929190611ad1565b6040516020818303038152906040529392505050565b6060816112825750506040805180820190915260018152600360fc1b602082015290565b8160005b81156112ac578061129681611e5e565b91506112a59050600a83611dcc565b9150611286565b60008167ffffffffffffffff8111156112c7576112c7611ecf565b6040519080825280601f01601f1916602001820160405280156112f1576020820181803683370190505b5090505b8415610ed557611306600183611de0565b9150611313600a86611e79565b61131e906030611db4565b60f81b81838151811061133357611333611eb9565b60200101906001600160f81b031916908160001a905350611355600a86611dcc565b94506112f5565b6001600160a01b0382166113b25760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610521565b6113bb81610cdf565b156114085760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610521565b6001600160a01b0382166000908152600360205260408120805460019290611431908490611db4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561159157604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906114d3903390899088908890600401611ba7565b602060405180830381600087803b1580156114ed57600080fd5b505af192505050801561151d575060408051601f3d908101601f1916820190925261151a918101906119ed565b60015b611577573d80801561154b576040519150601f19603f3d011682016040523d82523d6000602084013e611550565b606091505b50805161156f5760405162461bcd60e51b815260040161052190611bf7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ed5565b506001949350505050565b8280546115a890611e23565b90600052602060002090601f0160209004810192826115ca5760008555611610565b82601f106115e357805160ff1916838001178555611610565b82800160010185558215611610579182015b828111156116105782518255916020019190600101906115f5565b5061161c929150611620565b5090565b5b8082111561161c5760008155600101611621565b600067ffffffffffffffff83111561164f5761164f611ecf565b611662601f8401601f1916602001611d5f565b905082815283838301111561167657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146116a457600080fd5b919050565b600082601f8301126116ba57600080fd5b813560206116cf6116ca83611d90565b611d5f565b80838252828201915082860187848660051b89010111156116ef57600080fd5b6000805b8681101561173257823567ffffffffffffffff811115611711578283fd5b61171f8b88838d0101611740565b86525093850193918501916001016116f3565b509198975050505050505050565b600082601f83011261175157600080fd5b610c3d83833560208501611635565b60006020828403121561177257600080fd5b610c3d8261168d565b6000806040838503121561178e57600080fd5b6117978361168d565b91506117a56020840161168d565b90509250929050565b6000806000606084860312156117c357600080fd5b6117cc8461168d565b92506117da6020850161168d565b9150604084013590509250925092565b6000806000806080858703121561180057600080fd5b6118098561168d565b93506118176020860161168d565b925060408501359150606085013567ffffffffffffffff81111561183a57600080fd5b8501601f8101871361184b57600080fd5b61185a87823560208401611635565b91505092959194509250565b6000806040838503121561187957600080fd5b6118828361168d565b91506020830135801515811461189757600080fd5b809150509250929050565b600080604083850312156118b557600080fd5b6118be8361168d565b9150602083013567ffffffffffffffff8111156118da57600080fd5b6118e685828601611740565b9150509250929050565b6000806040838503121561190357600080fd5b61190c8361168d565b946020939093013593505050565b6000806040838503121561192d57600080fd5b823567ffffffffffffffff8082111561194557600080fd5b818501915085601f83011261195957600080fd5b813560206119696116ca83611d90565b8083825282820191508286018a848660051b890101111561198957600080fd5b600096505b848710156119ac57803583526001969096019591830191830161198e565b50965050860135925050808211156119c357600080fd5b506118e6858286016116a9565b6000602082840312156119e257600080fd5b8135610c3d81611ee5565b6000602082840312156119ff57600080fd5b8151610c3d81611ee5565b600060208284031215611a1c57600080fd5b813567ffffffffffffffff811115611a3357600080fd5b610ed584828501611740565b600060208284031215611a5157600080fd5b5035919050565b60008060408385031215611a6b57600080fd5b82359150602083013567ffffffffffffffff8111156118da57600080fd5b60008151808452611aa1816020860160208601611df7565b601f01601f19169290920160200192915050565b60008151611ac7818560208601611df7565b9290920192915050565b60008351611ae3818460208801611df7565b835190830190611af7818360208801611df7565b01949350505050565b600080845481600182811c915080831680611b1c57607f831692505b6020808410821415611b3c57634e487b7160e01b86526022600452602486fd5b818015611b505760018114611b6157611b8e565b60ff19861689528489019650611b8e565b60008b81526020902060005b86811015611b865781548b820152908501908301611b6d565b505084890196505b505050505050611b9e8185611ab5565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bda90830184611a89565b9695505050505050565b602081526000610c3d6020830184611a89565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f43616c6c657220646f6573206e6f7420686176652041646d696e2041636365736040820152607360f81b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d8857611d88611ecf565b604052919050565b600067ffffffffffffffff821115611daa57611daa611ecf565b5060051b60200190565b60008219821115611dc757611dc7611e8d565b500190565b600082611ddb57611ddb611ea3565b500490565b600082821015611df257611df2611e8d565b500390565b60005b83811015611e12578181015183820152602001611dfa565b83811115610afc5750506000910152565b600181811c90821680611e3757607f821691505b60208210811415611e5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611e7257611e72611e8d565b5060010190565b600082611e8857611e88611ea3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610cdc57600080fdfea26469706673582212205b03f66ad5c2002a11a41987772c81de259416b313590691880def847572f1de64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_cap": "- Maximum number of NFTs"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isAdmin(address)": {
        "params": {
          "admin": "- Address of Admin"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,string)": {
        "details": "- Only admins can mint new tokens",
        "params": {
          "URI": "- uri of the NFT",
          "recipient": "- Mint to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAdmin(address,bool)": {
        "params": {
          "admin": "- Address of Admin",
          "enabled": "- Enable/Disable Admin Access"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI_": "- New base uri"
        }
      },
      "setBatchURI(uint256[],string[])": {
        "params": {
          "_tokenIds": "- Token Ids of NFT",
          "tokenURIs": "- URIs to set"
        }
      },
      "setCap(uint256)": {
        "params": {
          "_cap": "- Maximum number of NFTs"
        }
      },
      "setRevealUntil(uint256)": {
        "params": {
          "_revealUntil": "- new tokenId to reveal untill"
        }
      },
      "setURI(uint256,string)": {
        "params": {
          "_tokenURI": "- uri to set",
          "tokenId": "- Token Id of NFT"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "- token ID of the NFT"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseURI()": {
        "notice": "- Returns the base uri for NFTs"
      },
      "isAdmin(address)": {
        "notice": "- Check Admin Access"
      },
      "mint(address,string)": {
        "notice": "- Mints NFT"
      },
      "setAdmin(address,bool)": {
        "notice": "- Set Admin Access"
      },
      "setBaseURI(string)": {
        "notice": "- Sets the base uri for NFTs"
      },
      "setBatchURI(uint256[],string[])": {
        "notice": "- Set URI for token batch"
      },
      "setCap(uint256)": {
        "notice": "- Sets cap for NFTs"
      },
      "setRevealUntil(uint256)": {
        "notice": "- Sets the reveal untill"
      },
      "setURI(uint256,string)": {
        "notice": "- Set URI for token"
      },
      "tokenURI(uint256)": {
        "notice": "- Returns metadata for token id"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 210,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 214,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 218,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 222,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 228,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2314,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_admins",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1861,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1532_storage"
      },
      {
        "astId": 1863,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "__baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 1865,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "__revealUntil",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1867,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "cap",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1871,
        "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1532_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1531,
            "contract": "src/nft/TestorinoNFT.sol:TestorinoNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}